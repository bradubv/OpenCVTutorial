package org.team1635.vision;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.*;
import org.opencv.imgproc.*;

/**
 * BobPipelineThree class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class PipelineThree {
	// Inputs
	private Rect areaOfInterest;
	private double[][] filter;
	private int showValStartX = 23; // 70
	private int showValEndX = 34; // 73
	private int showValStartY = 45; // 48
	private int showValEndY = 45; // 48

	// Outputs
	private Mat hsvThresholdOutput = new Mat();
	private Mat enhancedInput;
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> convexHullsOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint2f> aproxPolysOutput = new ArrayList<MatOfPoint2f>();
	private double[][] ranges;

	private int angle;
	private int targetCandidateCount;
	private Quadrilateral leftStrip;
	private Quadrilateral rightStrip;
	private int leftStripWidth;
	private int stripDistance;
	private boolean targetAcquired = false;

	// static {
	// System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	// }

	public PipelineThree() {
		filter = new double[3][2];
		ranges = new double[3][2];
	}

	public void setFilter(double[] hueRange, double[] satRange, double[] valRange) {
		this.filter[0] = hueRange;
		this.filter[1] = satRange;
		this.filter[2] = valRange;
	}

	private double[][] getRanges() {
		return ranges;
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the
	 * outputs.
	 */
	public void process(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;
		enhanceInput(source0);
		// double[] hsvThresholdHue = { 0.0, 178.4641638225256 };
		// double[] hsvThresholdHue = { 19.0, 22.0 };
		// double[] hsvThresholdHue = { 11.0, 15.0 }; //from Row 45 cols from 23
		// to 34: buggy x swap y
		// double[] hsvThresholdHue = { 52.0, 150.0 }; //from Row 45 cols from
		// 23 to 34
		// double[] hsvThresholdHue = { 0.0, 173.0 }; //from aoi(23,39,32,66)
		double[] hsvThresholdHue = filter[0];

		// double[] hsvThresholdSaturation = { 0.0, 41.774744027303754 };
		// double[] hsvThresholdSaturation = { 118.0, 140.0 };
		// double[] hsvThresholdSaturation = { 131.0, 168.0 }; //from Row 45
		// cols from 23 to 34: buggy x swap y
		// double[] hsvThresholdSaturation = { 3.0, 28.0 }; //from Row 45 cols
		// from 23 to 34
		// double[] hsvThresholdSaturation = { 0.0, 32.0 }; //from
		// aoi(23,39,32,66)
		double[] hsvThresholdSaturation = filter[1];

		// double[] hsvThresholdValue = { 210.97122302158272, 255.0 };
		// double[] hsvThresholdValue = { 155.0, 185.0 };
		// double[] hsvThresholdValue = { 128.0, 150.0 }; //from Row 45 cols
		// from 23 to 34
		// double[] hsvThresholdValue = { 245.0, 255.0 }; //from Row 45 cols
		// from 23 to 34
		// double[] hsvThresholdValue = { 249.0, 255.0 }; //from
		// aoi(23,39,32,66)
		double[] hsvThresholdValue = filter[2]; // from aoi(23,39,32,66)

		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Find_Contours0:
		// Mat findContoursInput = hsvThresholdOutput;
		Mat findContoursInput = hsvThresholdOutput.clone();
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
		double filterContoursMinArea = 0.0;
		double filterContoursMinPerimeter = 75.0;
		double filterContoursMinWidth = 0.0;
		double filterContoursMaxWidth = 1000.0;
		double filterContoursMinHeight = 0.0;
		double filterContoursMaxHeight = 1000.0;
		double[] filterContoursSolidity = { 75.53956834532374, 100 };
		double filterContoursMaxVertices = 1000000.0;
		double filterContoursMinVertices = 0.0;
		double filterContoursMinRatio = 0.0;
		double filterContoursMaxRatio = 1000.0;
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter,
				filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight,
				filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio,
				filterContoursMaxRatio, filterContoursOutput);

		// Step Convex_Hulls0:
		ArrayList<MatOfPoint> convexHullsContours = filterContoursOutput;
		convexHulls(convexHullsContours, convexHullsOutput);

		// Step Approximate_Polys
		approxPolys(convexHullsOutput, aproxPolysOutput);

		// Draw aproxPoly vertices onto
		drawPolyVertices(hsvThresholdOutput, aproxPolysOutput);

		// find the retro-reflective strips
		findStrips(aproxPolysOutput);
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * 
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	public Mat getEnhancedInput() {
		return enhancedInput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Convex_Hulls.
	 * 
	 * @return ArrayList<MatOfPoint> output from Convex_Hulls.
	 */
	public ArrayList<MatOfPoint> convexHullsOutput() {
		return convexHullsOutput;
	}

	public ArrayList<MatOfPoint2f> aproxPolysOutput() {
		return aproxPolysOutput;
	}

	public int getAngle() {
		return angle;
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input
	 *            The image on which to perform the HSL threshold.
	 * @param hue
	 *            The min and max hue
	 * @param sat
	 *            The min and max saturation
	 * @param val
	 *            The min and max value
	 * @param output
	 *            The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val, Mat out) {
		// System.out.println("Filter: Hue: " + hue[0] + " " + hue[1]); //debug
		// System.out.println("Filter: Sat: " + sat[0] + " " + sat[1]); //debug
		// System.out.println("Filter: Val: " + val[0] + " " + val[1]); //debug

		// TODO: there is probably no need for this tmpMat. Was put in due to
		// get(x, y ...) bug
		Mat tmpMat = new Mat(new Size(320, 240), CvType.CV_8UC3);
		Imgproc.cvtColor(input, tmpMat, Imgproc.COLOR_BGR2HSV);
		// showRanges(tmpMat, areaOfInterest);
		setRanges(tmpMat, areaOfInterest);

		Core.inRange(tmpMat, new Scalar(hue[0], sat[0], val[0]), new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the
	 * nearest black pixel.
	 * 
	 * @param input
	 *            The image on which to perform the Distance Transform.
	 * @param type
	 *            The Transform.
	 * @param maskSize
	 *            the size of the mask.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		} else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}

	/**
	 * Filters out contours that do not meet certain criteria.
	 * 
	 * @param inputContours
	 *            is the input list of contours
	 * @param output
	 *            is the the output list of contours
	 * @param minArea
	 *            is the minimum area of a contour that will be kept
	 * @param minPerimeter
	 *            is the minimum perimeter of a contour that will be kept
	 * @param minWidth
	 *            minimum width of a contour
	 * @param maxWidth
	 *            maximum width
	 * @param minHeight
	 *            minimum height
	 * @param maxHeight
	 *            maximimum height
	 * @param Solidity
	 *            the minimum and maximum solidity of a contour
	 * @param minVertexCount
	 *            minimum vertex Count of the contours
	 * @param maxVertexCount
	 *            maximum vertex Count
	 * @param minRatio
	 *            minimum ratio of width to height
	 * @param maxRatio
	 *            maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea, double minPerimeter, double minWidth,
			double maxWidth, double minHeight, double maxHeight, double[] solidity, double maxVertexCount,
			double minVertexCount, double minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		// operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth)
				continue;
			if (bb.height < minHeight || bb.height > maxHeight)
				continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea)
				continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter)
				continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1])
				continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)
				continue;
			final double ratio = bb.width / (double) bb.height;
			if (ratio < minRatio || ratio > maxRatio)
				continue;
			output.add(contour);
		}
	}

	/**
	 * Compute the convex hulls of contours.
	 * 
	 * @param inputContours
	 *            The contours on which to perform the operation.
	 * @param outputContours
	 *            The contours where the output will be stored.
	 */
	private void convexHulls(List<MatOfPoint> inputContours, ArrayList<MatOfPoint> outputContours) {
		final MatOfInt hull = new MatOfInt();
		outputContours.clear();
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final MatOfPoint mopHull = new MatOfPoint();
			Imgproc.convexHull(contour, hull);
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
				mopHull.put(j, 0, point);
			}
			outputContours.add(mopHull);
		}
	}

	private void approxPolys(ArrayList<MatOfPoint> contours, ArrayList<MatOfPoint2f> polys) {
		// for each contour detected approximate polygon to reduce the number of
		// vertices
		for (int i = 0; i < contours.size(); i++) {
			MatOfPoint contour = contours.get(i); // took out final
			MatOfPoint2f contour2f = new MatOfPoint2f();
			MatOfPoint2f aproxCont = new MatOfPoint2f();
			contour.convertTo(contour2f, CvType.CV_32FC2);
			Imgproc.approxPolyDP(contour2f, aproxCont, 4, true);
			polys.add(aproxCont);
		}
	}

	private void drawPolyVertices(Mat img, ArrayList<MatOfPoint2f> polys) {
		this.targetCandidateCount = polys.size(); // this will probably not end
													// up on the Rio
		for (int i = 0; i < polys.size(); i++) {
			MatOfPoint2f poly = polys.get(i);
			for (int vertCnt = 0; vertCnt < poly.rows(); vertCnt++) {
				Point point = new Point(poly.get(vertCnt, 0));
				Imgproc.circle(img, point, 3, new Scalar(255, 0, 0));
			}
		}

		// Put here anything you want to draw on the output.
		// Draw a line
		// Point startPoint = new Point(showValStartX, showValStartY); //debug
		// Point endPoint = new Point(showValEndX, showValEndY); //debug
		Point startPoint = new Point(158, 200); // debug
		Point endPoint = new Point(162, 230); // debug
		// Imgproc.line(img, startPoint, endPoint, new Scalar(60, 0, 0));
		// //debug
		// Draw a rectangle
		// Imgproc.rectangle(img, areaOfInterest.tl(), areaOfInterest.br(), new
		// Scalar(100, 0, 0), 2); //debug
		Imgproc.rectangle(img, startPoint, endPoint, new Scalar(100, 0, 0), 2); // debug

	}

	public int getTargetCandidateCount() {
		return this.aproxPolysOutput.size();
	}

	public void findStrips(ArrayList<MatOfPoint2f> polys) {
		List<Quadrilateral> quads = new ArrayList<Quadrilateral>();

		for (int i = 0; i < polys.size(); i++) {
			MatOfPoint2f poly = polys.get(i);

			if ((poly.rows() == 4) || (poly.rows() == 5)) {
				Quadrilateral quad = new Quadrilateral();
				quad.fromMatOfPoint2f(poly);

				if (quad.isDenaturated()) {
					System.out.println("debug: Denaturated quad detected, skipping");
				} else {
					quads.add(quad);
				}
			} else {
				System.out.println("debug: Shape has " + poly.rows() + " vertices, not 4 or 5, skipping");
			}
		}

		if (quads.size() == 3) { // see if two of the three can be merged into
									// one.
			if (Quadrilateral.lineUp(quads.get(0), quads.get(1))) {
				quads.add(Quadrilateral.merge(quads.get(0), quads.get(1)));
				quads.remove(1);
				quads.remove(0);
			} else if (Quadrilateral.lineUp(quads.get(1), quads.get(2))) {
				quads.add(Quadrilateral.merge(quads.get(1), quads.get(2)));
				quads.remove(2);
				quads.remove(1);
			} else if (Quadrilateral.lineUp(quads.get(0), quads.get(2))) {
				quads.add(Quadrilateral.merge(quads.get(0), quads.get(2)));
				quads.remove(2);
				quads.remove(0);
			} // else we still have three and the code below will set it to
				// target not acquired.
		}

		// TODO: do we need more filters based on the quads?
		switch (quads.size()) {
		case 1:
			leftStrip = quads.get(0); // TODO: we would need to keep track where
										// we are to know between frames to make
										// this smarter.
			targetAcquired = true;
			break;
		case 2:
			if (quads.get(0).getCenter().x < quads.get(1).getCenter().x) {
				leftStrip = quads.get(0);
				rightStrip = quads.get(1);
			} else {
				leftStrip = quads.get(1);
				rightStrip = quads.get(0);
			}
			targetAcquired = true;
			break;
		default:
			targetAcquired = false;
		}
	}

	public int getDistance() {
		return leftStrip.getWidth();
	}

	private int convertWidthToDistance(int width) {
		int retVal = 0;
		switch (width) {
		case 2:
			retVal = 90;
			break;
		case 3:
			retVal = 80;
			break;
		default:
			retVal = 0;
		}
		return retVal;
	}

	private void showVals(Mat img, int startX, int endX, int startY, int endY) {
		byte[] unsignedPoint = new byte[3];
		for (int y = startY; y <= endY; y++) {
			for (int x = startX; x <= endX; x++) {
				img.get(y, x, unsignedPoint);
				int hue = unsignedPoint[0] & 0xff;
				int sat = unsignedPoint[1] & 0xff;
				int val = unsignedPoint[2] & 0xff;
				System.out.print("x = " + x + "; y = " + y + "; Hue = " + hue);
				System.out.println("; Sat = " + sat + "; Val = " + val);
				System.out.print("x = " + x + "; y = " + y + "; Hue = " + unsignedPoint[0]);
				System.out.println("; Sat = " + unsignedPoint[1] + "; Val = " + unsignedPoint[2]);
			}
		}
		System.out.println("------------");
	}

	private void showOutVals(Mat img, int startX, int endX, int startY, int endY) {
		byte[] unsignedPoint = new byte[1];
		for (int y = startY; y <= endY; y++) {
			for (int x = startX; x <= endX; x++) {
				img.get(y, x, unsignedPoint);
				int val = unsignedPoint[0] & 0xff;
				System.out.println("x = " + x + "; y = " + y + "; Val = " + val);
			}
		}
		System.out.println("------------");
	}

	private String showMatInfo(Mat mat) {
		return "Type of mat is " + CvType.typeToString(mat.type()) + "; size is " + mat.cols() + " x " + mat.rows();
	} // debug

	private void enhanceInput(Mat input) {
		enhancedInput = input.clone();
		Imgproc.rectangle(enhancedInput, areaOfInterest.tl(), areaOfInterest.br(), new Scalar(0, 255, 0), 2); // debug
	}

	public void setAreaOfInterest(int topLeftX, int topLeftY, int bottomRightX, int bottomRightY) {
		Point topLeft = new Point(topLeftX, topLeftY);
		Point bottomRight = new Point(bottomRightX, bottomRightY);
		areaOfInterest = new Rect(topLeft, bottomRight);
	}

	public void showRanges() {
		System.out.print("Area: x from " + areaOfInterest.tl().x + " to " + areaOfInterest.br().x);
		System.out.println(", y from " + areaOfInterest.tl().y + " to " + areaOfInterest.br().y);
		System.out.println("Hue = " + ranges[0][0] + " to " + ranges[0][1]);
		System.out.println("Sat = " + ranges[1][0] + " to " + ranges[1][1]);
		System.out.println("Val = " + ranges[2][0] + " to " + ranges[2][1]);
		System.out.println("------------");
	}

	private void setRanges(Mat img, Rect area) {
		setRanges(img, (int) area.tl().x, (int) area.br().x, (int) area.tl().y, (int) area.br().y);
	}

	private void setRanges(Mat img, int startX, int endX, int startY, int endY) {
		byte[] unsignedPoint = new byte[3];
		int minHue = 180, maxHue = 0;
		int minSat = 255, maxSat = 0;
		int minVal = 255, maxVal = 0;

		for (int y = startY; y <= endY; y++) {
			for (int x = startX; x <= endX; x++) {
				img.get(y, x, unsignedPoint);
				int hue = unsignedPoint[0] & 0xff;
				int sat = unsignedPoint[1] & 0xff;
				int val = unsignedPoint[2] & 0xff;

				if (hue > maxHue)
					maxHue = hue;
				if (hue < minHue)
					minHue = hue;
				if (sat > maxSat)
					maxSat = sat;
				if (sat < minSat)
					minSat = sat;
				if (val > maxVal)
					maxVal = val;
				if (val < minVal)
					minVal = val;
			}
		}

		double[] hueRange = new double[2];
		hueRange[0] = minHue;
		hueRange[1] = maxHue;
		double[] satRange = new double[2];
		satRange[0] = minSat;
		satRange[1] = maxSat;
		double[] valRange = new double[2];
		valRange[0] = minVal;
		valRange[1] = maxVal;
		ranges[0] = hueRange;
		ranges[1] = satRange;
		ranges[2] = valRange;
	}

}