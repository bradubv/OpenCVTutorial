package org.team1635.vision;

import java.util.ArrayList;
import java.util.List;
import org.opencv.core.*;
import org.opencv.imgproc.*;

/**
 * BobPipelineThree class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class PipelineThree {

	// Outputs
	private Mat hsvThresholdOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> convexHullsOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint2f> aproxPolysOutput = new ArrayList<MatOfPoint2f>();
	private int distance;
	private int angle;
	private int targetCandidateCount;
	private int leftStripWidth;
	private int stripDistance;
	private int lowLeftX;
	private int lowLeftY;

	// static {
	// System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	// }

	/**
	 * This is the primary method that runs the entire pipeline and updates the
	 * outputs.
	 */
	public void process(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;
//		double[] hsvThresholdHue = { 0.0, 178.4641638225256 };
		double[] hsvThresholdHue = { 19.0, 22.0 };
//		double[] hsvThresholdSaturation = { 0.0, 41.774744027303754 };
		double[] hsvThresholdSaturation = { 118.0, 140.0 };		
//		double[] hsvThresholdValue = { 210.97122302158272, 255.0 };
		double[] hsvThresholdValue = { 155.0, 185.0 };
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Find_Contours0:
		Mat findContoursInput = hsvThresholdOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
		double filterContoursMinArea = 0.0;
		double filterContoursMinPerimeter = 75.0;
		double filterContoursMinWidth = 0.0;
		double filterContoursMaxWidth = 1000.0;
		double filterContoursMinHeight = 0.0;
		double filterContoursMaxHeight = 1000.0;
		double[] filterContoursSolidity = { 75.53956834532374, 100 };
		double filterContoursMaxVertices = 1000000.0;
		double filterContoursMinVertices = 0.0;
		double filterContoursMinRatio = 0.0;
		double filterContoursMaxRatio = 1000.0;
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter,
				filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight,
				filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio,
				filterContoursMaxRatio, filterContoursOutput);

		// Step Convex_Hulls0:
		ArrayList<MatOfPoint> convexHullsContours = filterContoursOutput;
		convexHulls(convexHullsContours, convexHullsOutput);

		// Step Approximate_Polys
		approxPolys(convexHullsOutput, aproxPolysOutput);

		// Draw aproxPoly vertices onto
		drawPolyVertices(hsvThresholdOutput, aproxPolysOutput);

		// Set distance
		distance = measureDistance(aproxPolysOutput);
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * 
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Convex_Hulls.
	 * 
	 * @return ArrayList<MatOfPoint> output from Convex_Hulls.
	 */
	public ArrayList<MatOfPoint> convexHullsOutput() {
		return convexHullsOutput;
	}

	public ArrayList<MatOfPoint2f> aproxPolysOutput() {
		return aproxPolysOutput;
	}

	public int getDistance() {
		return distance;
	}

	public int getAngle() {
		return angle;
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input
	 *            The image on which to perform the HSL threshold.
	 * @param hue
	 *            The min and max hue
	 * @param sat
	 *            The min and max saturation
	 * @param val
	 *            The min and max value
	 * @param output
	 *            The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val, Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		showVals(out, 70, 79, 47, 48);
		showVals(out, 200, 300, 47, 48);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]), new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the
	 * nearest black pixel.
	 * 
	 * @param input
	 *            The image on which to perform the Distance Transform.
	 * @param type
	 *            The Transform.
	 * @param maskSize
	 *            the size of the mask.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		} else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}

	/**
	 * Filters out contours that do not meet certain criteria.
	 * 
	 * @param inputContours
	 *            is the input list of contours
	 * @param output
	 *            is the the output list of contours
	 * @param minArea
	 *            is the minimum area of a contour that will be kept
	 * @param minPerimeter
	 *            is the minimum perimeter of a contour that will be kept
	 * @param minWidth
	 *            minimum width of a contour
	 * @param maxWidth
	 *            maximum width
	 * @param minHeight
	 *            minimum height
	 * @param maxHeight
	 *            maximimum height
	 * @param Solidity
	 *            the minimum and maximum solidity of a contour
	 * @param minVertexCount
	 *            minimum vertex Count of the contours
	 * @param maxVertexCount
	 *            maximum vertex Count
	 * @param minRatio
	 *            minimum ratio of width to height
	 * @param maxRatio
	 *            maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea, double minPerimeter, double minWidth,
			double maxWidth, double minHeight, double maxHeight, double[] solidity, double maxVertexCount,
			double minVertexCount, double minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		// operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth)
				continue;
			if (bb.height < minHeight || bb.height > maxHeight)
				continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea)
				continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter)
				continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1])
				continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)
				continue;
			final double ratio = bb.width / (double) bb.height;
			if (ratio < minRatio || ratio > maxRatio)
				continue;
			output.add(contour);
		}
	}

	/**
	 * Compute the convex hulls of contours.
	 * 
	 * @param inputContours
	 *            The contours on which to perform the operation.
	 * @param outputContours
	 *            The contours where the output will be stored.
	 */
	private void convexHulls(List<MatOfPoint> inputContours, ArrayList<MatOfPoint> outputContours) {
		final MatOfInt hull = new MatOfInt();
		outputContours.clear();
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final MatOfPoint mopHull = new MatOfPoint();
			Imgproc.convexHull(contour, hull);
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
				mopHull.put(j, 0, point);
			}
			outputContours.add(mopHull);
		}
	}

	private void approxPolys(ArrayList<MatOfPoint> contours, ArrayList<MatOfPoint2f> polys) {
		// for each contour detected approximate polygon to reduce the number of
		// vertices
		for (int i = 0; i < contours.size(); i++) {
			MatOfPoint contour = contours.get(i); // took out final
			MatOfPoint2f contour2f = new MatOfPoint2f();
			MatOfPoint2f aproxCont = new MatOfPoint2f();
			contour.convertTo(contour2f, CvType.CV_32FC2);
			Imgproc.approxPolyDP(contour2f, aproxCont, 4, true);
			polys.add(aproxCont);
		}
	}

	private void drawPolyVertices(Mat img, ArrayList<MatOfPoint2f> polys) {
		this.targetCandidateCount = polys.size(); // this will probably not end
													// up on the Rio
		for (int i = 0; i < polys.size(); i++) {
			MatOfPoint2f poly = polys.get(i);
			for (int vertCnt = 0; vertCnt < poly.rows(); vertCnt++) {
				Point point = new Point(poly.get(vertCnt, 0));
				Imgproc.circle(img, point, 3, new Scalar(255, 0, 0));
				// System.out.print("poly = " + i + "; vert = " + vertCnt);
				// //debug
				// System.out.println("; x = " + point.x + "; y = " + point.y);
				// //debug
			}
		}
		Point startPoint = new Point(200, 47);
		Point endPoint = new Point(300, 47);
		Imgproc.line(img, startPoint, endPoint, new Scalar(100, 0, 0));
	}

	public int getTargetCandidateCount() {
		return this.aproxPolysOutput.size();
	}

	private int measureDistance(ArrayList<MatOfPoint2f> polys) {
		int maxHeight = 0;
		for (int i = 0; i < polys.size(); i++) {
			MatOfPoint2f poly = polys.get(i);

			if (poly.rows() == 4) {
				Quadrilateral quad = new Quadrilateral();
				quad.fromMatOfPoint2f(poly);
				int height = quad.getHeight();

				if (height > maxHeight) {
					maxHeight = height;
				}
			} else {
				System.out.println("Shape has " + poly.rows() + " vertices.");
			}
		}

		return maxHeight;
	}

	private void showVals(Mat img, int startX, int endX, int startY, int endY) {
		byte[] unsignedPoint = new byte[3];
		for (int y = startY; y <= endY; y++) {
			for (int x = startX; x <= endX; x++) {
				img.get(x, y, unsignedPoint); // debug
				int hue = unsignedPoint[0] & 0xff;
				int sat = unsignedPoint[1] & 0xff;
				int val = unsignedPoint[2] & 0xff;
				System.out.print("x = " + x + "; y = " + y + "; Hue = " + hue);
				System.out.println("; Sat = " + sat + "; Val = " + val);
				// for (int i = 0; i < unsignedPoint.length; i++) { // debug
				// int signedPoint = unsignedPoint[i] & 0xff; // debug
				// System.out.println("i = " + i + "; signedPoint = " +
				// signedPoint); // debug
				// } // debug
			}
		}
		System.out.println("------------");
	}

	// static void describeContour(MatOfPoint contour) {
	// System.out.println(" rows = " + contour.rows());
	// System.out.println(" columns = " + contour.cols());
	// System.out.println(" channels = " + contour.channels());
	// System.out.println(" total = " + contour.total());
	// System.out.println(" elemSize = " + contour.elemSize());
	// for (int vertCnt = 0; vertCnt < contour.rows(); vertCnt++) {
	// Point point = new Point(contour.get(vertCnt, 0));
	// }
	// }
	//
	// static void describeContour(MatOfPoint2f contour) {
	// System.out.println(" rows = " + contour.rows());
	// System.out.println(" columns = " + contour.cols());
	// System.out.println(" channels = " + contour.channels());
	// System.out.println(" total = " + contour.total());
	// System.out.println(" elemSize = " + contour.elemSize());
	// for (int vertCnt = 0; vertCnt < contour.rows(); vertCnt++) {
	// float[] data = new float[2];
	// contour.get(vertCnt, 0, data);
	// }
	// }
	//
	// static int analyzeContours(ArrayList<MatOfPoint2f> contours) {
	// int retCode;
	//
	// //if we have more than three shapes something went wrong with the
	// filtering
	// if (contours.size() < 3) {
	//
	// retCode = 0;
	// } else {
	// retCode = contours.size();
	// }
	//
	// return retCode;
	// }
	//
	// static void orientPolygon(MatOfPoint2f contour) {
	//
	// }

}